LOAD CSV queries generated by the CSV import tool

Create Driver nodes:
// #2 Create constraints (in case of an edit, keep these comments)
CREATE CONSTRAINT ON (n:`Driver`) ASSERT EXISTS (n.`id`);
CREATE CONSTRAINT ON (n:`Driver`) ASSERT n.`id` IS UNIQUE;
CREATE CONSTRAINT ON (n:`Driver`) ASSERT EXISTS (n.`name`);
CREATE CONSTRAINT ON (n:`Driver`) ASSERT EXISTS (n.`license_plate`);

// #3 Create indexes (in case of an edit, keep these comments)
CREATE INDEX ON :`Driver`(`id`);

// #4 Import nodes (in case of an edit, keep these comments)
LOAD CSV FROM "/node_driver_data.csv" WITH HEADER IGNORE BAD AS row
  MERGE (n:`Driver` {
    `id`: CASE row.`id` WHEN "" THEN null ELSE row.`id` END
  })
  ON CREATE SET
    n.`name` = CASE row.`name` WHEN "" THEN null ELSE row.`name` END,
    n.`license_plate` = CASE row.`license_plate` WHEN "" THEN null ELSE row.`license_plate` END,
    n.`status` = CASE row.`status` WHEN "" THEN null ELSE row.`status` END
  ON MATCH SET
    n.`name` = CASE row.`name` WHEN "" THEN null ELSE row.`name` END,
    n.`license_plate` = CASE row.`license_plate` WHEN "" THEN null ELSE row.`license_plate` END,
    n.`status` = CASE row.`status` WHEN "" THEN null ELSE row.`status` END;


Create Location nodes:
// #2 Create constraints (in case of an edit, keep these comments)
CREATE CONSTRAINT ON (n:`Location`) ASSERT EXISTS (n.`id`);
CREATE CONSTRAINT ON (n:`Location`) ASSERT n.`id` IS UNIQUE;
CREATE CONSTRAINT ON (n:`Location`) ASSERT EXISTS (n.`name`);

// #3 Create indexes (in case of an edit, keep these comments)
CREATE INDEX ON :`Location`(`id`);

// #4 Import nodes (in case of an edit, keep these comments)
LOAD CSV FROM "/node_location_data.csv" WITH HEADER IGNORE BAD AS row
  MERGE (n:`Location` {
    `id`: CASE row.`id` WHEN "" THEN null ELSE row.`id` END
  })
  ON CREATE SET
    n.`name` = CASE row.`name` WHEN "" THEN null ELSE row.`name` END,
    n.`city` = CASE row.`city` WHEN "" THEN null ELSE row.`city` END,
    n.`zipcode` = toInteger(row.`zipcode`)
  ON MATCH SET
    n.`name` = CASE row.`name` WHEN "" THEN null ELSE row.`name` END,
    n.`city` = CASE row.`city` WHEN "" THEN null ELSE row.`city` END,
    n.`zipcode` = toInteger(row.`zipcode`);


Create Order nodes:
// #2 Create constraints (in case of an edit, keep these comments)
CREATE CONSTRAINT ON (n:`Order`) ASSERT EXISTS (n.`id`);
CREATE CONSTRAINT ON (n:`Order`) ASSERT n.`id` IS UNIQUE;
CREATE CONSTRAINT ON (n:`Order`) ASSERT EXISTS (n.`order_id`);

// #3 Create indexes (in case of an edit, keep these comments)
CREATE INDEX ON :`Order`(`id`);

// #4 Import nodes (in case of an edit, keep these comments)
LOAD CSV FROM "/node_order_data.csv" WITH HEADER IGNORE BAD AS row
  MERGE (n:`Order` {
    `id`: CASE row.`id` WHEN "" THEN null ELSE row.`id` END
  })
  ON CREATE SET
    n.`status` = CASE row.`status` WHEN "" THEN null ELSE row.`status` END,
    n.`order_id` = toInteger(row.`order_id`),
    n.`product` = CASE row.`product` WHEN "" THEN null ELSE row.`product` END,
    n.`quantity` = toInteger(row.`quantity`)
  ON MATCH SET
    n.`status` = CASE row.`status` WHEN "" THEN null ELSE row.`status` END,
    n.`order_id` = toInteger(row.`order_id`),
    n.`product` = CASE row.`product` WHEN "" THEN null ELSE row.`product` END,
    n.`quantity` = toInteger(row.`quantity`);


Create ASSIGNED_TO edges:
// #5 Import relationships (in case of an edit, keep these comments)
LOAD CSV FROM "/edge_assigned_to_data.csv" WITH HEADER IGNORE BAD AS row
  MATCH (n:`Order` {
    `id`: CASE row.`id` WHEN "" THEN null ELSE row.`id` END
  })
  MATCH (m:`Driver` {
    `id`: CASE row.`to_id` WHEN "" THEN null ELSE row.`to_id` END
  })
  CREATE (n)-[:`ASSIGNED_TO`]->(m);


Create BELONGS_TO edges:
// #5 Import relationships (in case of an edit, keep these comments)
LOAD CSV FROM "/edge_belongs_to_data.csv" WITH HEADER IGNORE BAD AS row
  MATCH (n:`Order` {
    `id`: CASE row.`id` WHEN "" THEN null ELSE row.`id` END
  })
  MATCH (m:`Location` {
    `id`: CASE row.`to_id` WHEN "" THEN null ELSE row.`to_id` END
  })
  CREATE (n)-[:`BELONGS_TO`]->(m);


Create DRIVES edges:
// #5 Import relationships (in case of an edit, keep these comments)
LOAD CSV FROM "/edge_drives_data.csv" WITH HEADER IGNORE BAD AS row
  MATCH (n:`Driver` {
    `id`: CASE row.`id` WHEN "" THEN null ELSE row.`id` END
  })
  MATCH (m:`Location` {
    `id`: CASE row.`to_id` WHEN "" THEN null ELSE row.`to_id` END
  })
  CREATE (n)-[:`DRIVES`]->(m); 